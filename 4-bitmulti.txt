Code for 4-bit mutiplication
First Number: xyzq
Second Number: abcd

opcdR_dRs1Rs2til
++++---+++---+++
"0010100000000001", -- 0, load 'xyzq'=1
"1011000100000011", -- instruction
"1011001100000010",
"1011010100000001",
"1011011100000000",
"0010100111000111", -- load 'abcd'=7
"0100000100000000",
"0100001100000000",
"0100010100000000",
"0100011100000000",
"1000000000000011",
"1000001001000010",
"1000010010000001",
"0000000000001000",
"0000000000010000",
"0000000000011000",
 ++++---+++---+++
"1110xxx000000xxx" --16 -- if R0==0, branch to the beginning
"0010100000000000" --17 -- else load R4=R0 and
"1100000000xxxxxx" --18 -- branch to instruction 1

"1110110000000000" --16 -- if R0==0, branch to the beginning
"0010100000000000" --17 -- else load R4=R0 and
"1100000000101111" --18 -- branch to instruction 1

 opcdR_dRs1Rs2til
 ++++---+++---+++
"0010000000000100", --R0=4
"0010100000000111", --R1=7
"0000010000001000", --R2=R0+R1
"0001010001000000", --R2=R1-R0
"0011010000000001", --R2=R0-1
"0101010010000000", --R2=R2 OR R0=111
"0100010001001000", --R2=R1andR1=7
"0110010001000011", --R2=R1AND011=3
"0111010001001111", --R2=R1or1111=1111=F
"1000010001000001", --R2=shl(R1)=1110=E
"1001010000000001", --R2=shr(R0)=0010=2
